diff --git a/Project6.vcxproj b/Project6.vcxproj
index 73f4deb..1c029c8 100644
--- a/Project6.vcxproj
+++ b/Project6.vcxproj
@@ -193,7 +193,7 @@
       <SubSystem>Windows</SubSystem>
       <GenerateDebugInformation>true</GenerateDebugInformation>
       <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
-      <AdditionalDependencies>Xinput9_1_0.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>OpenGL32.lib;Xinput9_1_0.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
     </Link>
     <PostBuildEvent>
       <Command>xcopy .\AE\lib\Alpha_Engine_D.dll "$(OutDir)" /Y
diff --git a/Project6.vcxproj.filters b/Project6.vcxproj.filters
index d1ff686..b233d4a 100644
--- a/Project6.vcxproj.filters
+++ b/Project6.vcxproj.filters
@@ -145,9 +145,6 @@
     <ClCompile Include="Source\ColliderBox.cpp">
       <Filter>Engine\GameObjects\Colliders</Filter>
     </ClCompile>
-    <ClCompile Include="Source\LevelButton.cpp">
-      <Filter>Engine\Buttons</Filter>
-    </ClCompile>
     <ClCompile Include="source\Serializable.cpp">
       <Filter>Engine\GameObjects</Filter>
     </ClCompile>
@@ -290,9 +287,6 @@
     <ClInclude Include="Source\ColliderBox.h">
       <Filter>Engine\GameObjects\Colliders</Filter>
     </ClInclude>
-    <ClInclude Include="Source\LevelButton.h">
-      <Filter>Engine\Buttons</Filter>
-    </ClInclude>
     <ClInclude Include="rapidjson\allocators.h">
       <Filter>RapidJSON</Filter>
     </ClInclude>
diff --git a/Source/BehaviorArmy.cpp b/Source/BehaviorArmy.cpp
index 7e4863a..0e3b1f4 100644
--- a/Source/BehaviorArmy.cpp
+++ b/Source/BehaviorArmy.cpp
@@ -219,6 +219,7 @@ void BehaviorArmy::OnEnter()
 			/*camera = Engine::GetInstance().AddCamera({AEGfxGetWinMinX() + winWidth/4, AEGfxGetWinMinY() + winHeight/2}, 
 													 {AEGfxGetWinMinX(), AEGfxGetWinMaxY()}, {AEGfxGetWinMaxX(), AEGfxGetWinMinY()}, 
 													 {0, 0});*/
+			camera = Engine::GetInstance().AddCamera({ 0, 0 }, { 0, 0 }, { 0.5f, 1 }, { 0, 0 });
 			break;
 		case sRight:
 			for (int i = 0; i < tilemap->GetTilemapWidth()-1; i++) path_.push_back({ -1, 0 });
@@ -227,6 +228,7 @@ void BehaviorArmy::OnEnter()
 			/*camera = Engine::GetInstance().AddCamera({AEGfxGetWinMaxX() - winWidth/4, AEGfxGetWinMinY() + winHeight/2}, 
 													 {AEGfxGetWinMinX(), AEGfxGetWinMaxY()}, {AEGfxGetWinMaxX(), AEGfxGetWinMinY()}, 
 													 {0, 0});*/
+			camera = Engine::GetInstance().AddCamera({ 0, 0 }, { 0.5f, 0 }, { 1, 1 }, { 0, 0 });
 			break;
 		}
 		frontLine = flStart;
@@ -250,7 +252,7 @@ void BehaviorArmy::OnUpdate(float dt)
 	{
 	case cArmyNormal:
 		gamepad.Update();
-		Vector2D curspos = cursor->GetScreenTranslation();
+		Vector2D curspos = cursor->GetTranslation();
 		curspos.x += gamepad.GetAxis(/*Gamepad::aLStickX*/controlList["CamAxisX"]) * 1600 * dt;
 		curspos.y += gamepad.GetAxis(/*Gamepad::aLStickY*/controlList["CamAxisY"]) * 1600 * dt;
 		Trace::GetInstance().GetStream() << gamepad.GetAxisNoDeadzone(/*Gamepad::aLStickX*/controlList["CamAxisX"]) << std::endl;
@@ -435,9 +437,11 @@ void BehaviorArmy::OnUpdate(float dt)
 			curspos.y = AEGfxGetWinMaxY() - cursscl.y / 2;
 		if (curspos.y - cursscl.y / 2 < AEGfxGetWinMinY())
 			curspos.y = AEGfxGetWinMinY() + cursscl.y / 2;
-		cursor->SetScreenTranslation(curspos);
-		//if (camera)
-		//	*camera = -curspos;
+		//cursor->SetScreenTranslation(curspos);
+		cursor->SetTranslation(curspos);
+		//Engine::GetInstance().cameras[side - 1].worldPos = -curspos;
+		if (camera)
+			*camera = curspos;
 		//for (unsigned i = 0; i < controls.size(); i++) {
 		//	if (controls[i].CheckTriggered()) {
 		//		switch (side) {
diff --git a/Source/Button.cpp b/Source/Button.cpp
index 866066e..41b0177 100644
--- a/Source/Button.cpp
+++ b/Source/Button.cpp
@@ -132,6 +132,7 @@ void Button::RestartEffect(Button & button, float dt)
 {
 	Engine::GetInstance().SetPaused(false);
 	LevelManager::GetLayer(0)->Restart();
+	Engine::GetInstance().ClearCameras();
 }
 
 void Button::QuitEffect(Button &button, float dt)
diff --git a/Source/Engine.cpp b/Source/Engine.cpp
index d7e93ae..98581e0 100644
--- a/Source/Engine.cpp
+++ b/Source/Engine.cpp
@@ -23,6 +23,8 @@
 #include "Sprite.h"
 #include "Button.h"
 
+#include <gl\GL.h>
+
 //------------------------------------------------------------------------------
 // Private Structures:
 //------------------------------------------------------------------------------
@@ -71,7 +73,7 @@ void Engine::Init(const char *startLevel)
 	//Initialize the pause menu.
 	//PauseMenu::GetInstance().Init();
 
-	AddCamera({ 0, 0 }, { AEGfxGetWinMinX(), AEGfxGetWinMaxY() }, { AEGfxGetWinMaxX(), AEGfxGetWinMinY() }, { 0, 0 });
+	//AddCamera({ 0, 0 }, { AEGfxGetWinMinX(), AEGfxGetWinMaxY() }, { AEGfxGetWinMaxX(), AEGfxGetWinMinY() }, { 0, 0 });
 }
 
 // Update the game engine.
@@ -90,6 +92,15 @@ void Engine::Update(float dt)
 		switchPause = false;
 	}
 
+	if (AEInputCheckCurr('W'))
+		cameras[0]->worldPos.y += dt * 100;
+	if (AEInputCheckCurr('S'))
+		cameras[0]->worldPos.y -= dt * 100;
+	if (AEInputCheckCurr('A'))
+		cameras[0]->worldPos.x -= dt * 100;
+	if (AEInputCheckCurr('D'))
+		cameras[0]->worldPos.x += dt * 100;
+
 	// Update the System (Windows, Event Handlers).
 	System::GetInstance().Update(dt);
 
@@ -105,11 +116,14 @@ void Engine::Update(float dt)
 	//GameObjectManager::GetInstance().CheckCollisions();
 
 	// Draw objects.
-	for (Camera c : cameras) {
-		Transform::SetCamTranslation(c.worldPos);
-		Sprite::SetBounds(c.topLeft, c.bottomRight);
+	numCamera = 0;
+	for (Camera *c : cameras) {
+		Transform::SetCamTranslation(c->worldPos);
+		//glViewport((GLint)(c.topLeft.x * GetWinWidth()), (GLint)(c.topLeft.y * GetWinHeight()), (GLsizei)((c.bottomRight.x - c.topLeft.x) * GetWinWidth()), (GLsizei)((c.bottomRight.y - c.topLeft.y) * GetWinHeight()));
+		//Sprite::SetBounds(c.topLeft, c.bottomRight);
 		//GameObjectManager::GetInstance().Draw();
 		GameObjectManager::DrawAll();
+		numCamera++;
 	}
 
 	//PauseMenu::GetInstance().Update(dt);
@@ -182,8 +196,28 @@ void Engine::Quit()
 
 Vector2D* Engine::AddCamera(Vector2D screenPos, Vector2D topLeft, Vector2D bottomRight, Vector2D worldPos)
 {
-	cameras.push_back({ screenPos, topLeft, bottomRight, worldPos });
-	return &(cameras.at(cameras.size() - 1).worldPos);
+	cameras.push_back(new Camera({screenPos, topLeft, bottomRight, worldPos}));
+	return &(cameras.at(cameras.size() - 1)->worldPos);
+}
+
+void Engine::ClearCameras() {
+	for (Camera *cam : cameras)
+		delete cam;
+	cameras.clear();
+}
+
+void Engine::SetViewport() {
+	glViewport((GLint)(cameras[numCamera]->topLeft.x * GetWinWidth()), (GLint)(cameras[numCamera]->topLeft.y * GetWinHeight()),
+		(GLsizei)((cameras[numCamera]->bottomRight.x - cameras[numCamera]->topLeft.x) * GetWinWidth()), (GLsizei)((cameras[numCamera]->bottomRight.y - cameras[numCamera]->topLeft.y) * GetWinHeight()));
+	//glMatrixMode(GL_PROJECTION_MATRIX);
+}
+
+int Engine::GetWinWidth() {
+	return (int)(AEGfxGetWinMaxX() - AEGfxGetWinMinX());
+}
+
+int Engine::GetWinHeight() {
+	return (int)(AEGfxGetWinMaxY() - AEGfxGetWinMinY());
 }
 
 //------------------------------------------------------------------------------
diff --git a/Source/Engine.h b/Source/Engine.h
index d486177..8c5b4bb 100644
--- a/Source/Engine.h
+++ b/Source/Engine.h
@@ -65,8 +65,13 @@ public:
 
 	void Quit();
 
-private:
 	Vector2D* AddCamera(Vector2D screenPos, Vector2D topLeft, Vector2D bottomRight, Vector2D worldPos);
+	void ClearCameras();
+	void SetViewport();
+
+private:
+	static int GetWinWidth();
+	static int GetWinHeight();
 
 	struct Camera {
 		Vector2D screenPos;
@@ -96,6 +101,8 @@ private:
 	bool paused = false; //Is the game paused?
 	bool switchPause = false;
 
-	vector<Camera> cameras;
+	int numCamera;
+public:
+	vector<Camera*> cameras;
 };
 /*----------------------------------------------------------------------------*/
diff --git a/Source/Sprite.cpp b/Source/Sprite.cpp
index 4b1d338..6f5c0ae 100644
--- a/Source/Sprite.cpp
+++ b/Source/Sprite.cpp
@@ -1,6 +1,7 @@
 #include "stdafx.h"
 #include "Sprite.h"
 #include <AEEngine.h>
+#include "Engine.h"
 #include "GameObject.h"
 #include "SpriteSource.h"
 #include "Transform.h"
@@ -41,10 +42,11 @@ void Sprite::Draw(Transform &transform) const {
 	} else {
 		AEGfxSetRenderMode(AE_GFX_RM_COLOR);
 	}
+	Engine::GetInstance().SetViewport();
 	AEGfxSetTransparency(alpha);
 	AEGfxSetBlendMode(AE_GFX_BM_BLEND);
 	AEGfxSetBlendColor(color.r, color.g, color.b, color.a);
-	AEGfxSetTransform(transform.GetMatrix().m);
+	AEGfxSetTransform((Matrix2D::ScalingMatrix(2, 1) * transform.GetMatrix()).m);
 	//AEGfxVertexList *newMesh = CutMesh(transform);
 	//if (newMesh) {
 	//	AEGfxMeshDraw(newMesh, AE_GFX_MDM_TRIANGLES);
diff --git a/Source/System.cpp b/Source/System.cpp
index 3637475..cefcc29 100644
--- a/Source/System.cpp
+++ b/Source/System.cpp
@@ -43,7 +43,7 @@ void System::Init()
 	AESysInitInfo sysInitInfo;
 	sysInitInfo.mAppInstance = systemInfo.mAppInstance;
 	sysInitInfo.mShow = systemInfo.mCreateWindow;
-	sysInitInfo.mWinWidth = 800;
+	sysInitInfo.mWinWidth = 1600;
 	sysInitInfo.mWinHeight = 600;
 	sysInitInfo.mCreateConsole = 1;
 	sysInitInfo.mMaxFrameRate = 60;
diff --git a/Source/Transform.cpp b/Source/Transform.cpp
index c260744..477eb7d 100644
--- a/Source/Transform.cpp
+++ b/Source/Transform.cpp
@@ -24,7 +24,7 @@ Matrix2D & Transform::GetMatrix()
 		isDirty = false;
 	}
 	if (followCamera && camIsDirty)
-        matrix = Matrix2D().TranslationMatrix(camTranslation.X(), camTranslation.Y()) * matrix;
+        matrix = Matrix2D().TranslationMatrix(-camTranslation.X(), -camTranslation.Y()) * matrix;
 	return matrix;
 }
 
diff --git a/Source/Vector2D.cpp b/Source/Vector2D.cpp
index a10c440..26195fc 100644
--- a/Source/Vector2D.cpp
+++ b/Source/Vector2D.cpp
@@ -233,18 +233,18 @@ Vector2D& Vector2D::operator-= (const Vector2D &other)
 	y -= other.y;
 
 	return *this;
-}
-
-Vector2D& Vector2D::operator*=(const Vector2D & other)
-{
-	x *= other.x;
-	y *= other.y;
-
-	return *this;
-}
-
-Vector2D& Vector2D::operator/=(const Vector2D & other)
-{
+}
+
+Vector2D& Vector2D::operator*=(const Vector2D & other)
+{
+	x *= other.x;
+	y *= other.y;
+
+	return *this;
+}
+
+Vector2D& Vector2D::operator/=(const Vector2D & other)
+{
 	x /= other.x;
 	y /= other.y;
 
